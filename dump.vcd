$date
	Tue Jul 09 14:47:58 2024
$end
$version
	ModelSim Version 2020.4
$end
$timescale
	1ns
$end

$scope module CPU_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var wire 1 # read $end
$var wire 1 $ write $end
$var wire 1 % memIn [7] $end
$var wire 1 & memIn [6] $end
$var wire 1 ' memIn [5] $end
$var wire 1 ( memIn [4] $end
$var wire 1 ) memIn [3] $end
$var wire 1 * memIn [2] $end
$var wire 1 + memIn [1] $end
$var wire 1 , memIn [0] $end
$var wire 1 - memOut [7] $end
$var wire 1 . memOut [6] $end
$var wire 1 / memOut [5] $end
$var wire 1 0 memOut [4] $end
$var wire 1 1 memOut [3] $end
$var wire 1 2 memOut [2] $end
$var wire 1 3 memOut [1] $end
$var wire 1 4 memOut [0] $end
$var wire 1 5 address [3] $end
$var wire 1 6 address [2] $end
$var wire 1 7 address [1] $end
$var wire 1 8 address [0] $end

$scope module CPU_dut $end
$var wire 1 9 clk $end
$var wire 1 : clr $end
$var wire 1 - memoryOut [7] $end
$var wire 1 . memoryOut [6] $end
$var wire 1 / memoryOut [5] $end
$var wire 1 0 memoryOut [4] $end
$var wire 1 1 memoryOut [3] $end
$var wire 1 2 memoryOut [2] $end
$var wire 1 3 memoryOut [1] $end
$var wire 1 4 memoryOut [0] $end
$var wire 1 5 address [3] $end
$var wire 1 6 address [2] $end
$var wire 1 7 address [1] $end
$var wire 1 8 address [0] $end
$var wire 1 % memoryIn [7] $end
$var wire 1 & memoryIn [6] $end
$var wire 1 ' memoryIn [5] $end
$var wire 1 ( memoryIn [4] $end
$var wire 1 ) memoryIn [3] $end
$var wire 1 * memoryIn [2] $end
$var wire 1 + memoryIn [1] $end
$var wire 1 , memoryIn [0] $end
$var wire 1 # read $end
$var wire 1 $ write $end
$var wire 1 ; bus [7] $end
$var wire 1 < bus [6] $end
$var wire 1 = bus [5] $end
$var wire 1 > bus [4] $end
$var wire 1 ? bus [3] $end
$var wire 1 @ bus [2] $end
$var wire 1 A bus [1] $end
$var wire 1 B bus [0] $end
$var wire 1 C dr [7] $end
$var wire 1 D dr [6] $end
$var wire 1 E dr [5] $end
$var wire 1 F dr [4] $end
$var wire 1 G dr [3] $end
$var wire 1 H dr [2] $end
$var wire 1 I dr [1] $end
$var wire 1 J dr [0] $end
$var wire 1 K ac [7] $end
$var wire 1 L ac [6] $end
$var wire 1 M ac [5] $end
$var wire 1 N ac [4] $end
$var wire 1 O ac [3] $end
$var wire 1 P ac [2] $end
$var wire 1 Q ac [1] $end
$var wire 1 R ac [0] $end
$var wire 1 S ir [7] $end
$var wire 1 T ir [6] $end
$var wire 1 U ir [5] $end
$var wire 1 V ir [4] $end
$var wire 1 W ir [3] $end
$var wire 1 X ir [2] $end
$var wire 1 Y ir [1] $end
$var wire 1 Z ir [0] $end
$var wire 1 [ ar [3] $end
$var wire 1 \ ar [2] $end
$var wire 1 ] ar [1] $end
$var wire 1 ^ ar [0] $end
$var wire 1 _ pc [3] $end
$var wire 1 ` pc [2] $end
$var wire 1 a pc [1] $end
$var wire 1 b pc [0] $end
$var wire 1 c cout $end
$var wire 1 d loadIR $end
$var wire 1 e incIR $end
$var wire 1 f clrIR $end
$var wire 1 g loadDR $end
$var wire 1 h incDR $end
$var wire 1 i clrDR $end
$var wire 1 j loadPC $end
$var wire 1 k incPC $end
$var wire 1 l clrPC $end
$var wire 1 m loadAR $end
$var wire 1 n incAR $end
$var wire 1 o clrAR $end
$var wire 1 p loadAC $end
$var wire 1 q incAC $end
$var wire 1 r clrAC $end
$var wire 1 s t [7] $end
$var wire 1 t t [6] $end
$var wire 1 u t [5] $end
$var wire 1 v t [4] $end
$var wire 1 w t [3] $end
$var wire 1 x t [2] $end
$var wire 1 y t [1] $end
$var wire 1 z t [0] $end
$var wire 1 { d [7] $end
$var wire 1 | d [6] $end
$var wire 1 } d [5] $end
$var wire 1 ~ d [4] $end
$var wire 1 !! d [3] $end
$var wire 1 "! d [2] $end
$var wire 1 #! d [1] $end
$var wire 1 $! d [0] $end
$var wire 1 %! busSEL [2] $end
$var wire 1 &! busSEL [1] $end
$var wire 1 '! busSEL [0] $end
$var wire 1 (! aluOPCODE [2] $end
$var wire 1 )! aluOPCODE [1] $end
$var wire 1 *! aluOPCODE [0] $end
$var wire 1 +! sc [2] $end
$var wire 1 ,! sc [1] $end
$var wire 1 -! sc [0] $end
$var wire 1 .! clrSC $end
$var wire 1 /! busIR $end
$var wire 1 0! busDR $end
$var wire 1 1! busPC $end
$var wire 1 2! busAR $end
$var wire 1 3! busAC $end
$var wire 1 4! opADD $end
$var wire 1 5! opASHL $end
$var wire 1 6! opXNOR $end
$var wire 1 7! opDIV2 $end
$var wire 1 8! opLOAD $end
$var wire 1 9! opSTORE $end
$var wire 1 :! opCOMP2S $end
$var wire 1 ;! opROUND $end
$var wire 1 <! i $end

$scope module encoder_busSEL $end
$var wire 1 =! in [7] $end
$var wire 1 2! in [6] $end
$var wire 1 1! in [5] $end
$var wire 1 0! in [4] $end
$var wire 1 3! in [3] $end
$var wire 1 /! in [2] $end
$var wire 1 >! in [1] $end
$var wire 1 # in [0] $end
$var wire 1 %! out [2] $end
$var wire 1 &! out [1] $end
$var wire 1 '! out [0] $end
$upscope $end

$scope module encoder_aluOPCODE $end
$var wire 1 4! in [7] $end
$var wire 1 5! in [6] $end
$var wire 1 6! in [5] $end
$var wire 1 7! in [4] $end
$var wire 1 8! in [3] $end
$var wire 1 9! in [2] $end
$var wire 1 :! in [1] $end
$var wire 1 ;! in [0] $end
$var wire 1 (! out [2] $end
$var wire 1 )! out [1] $end
$var wire 1 *! out [0] $end
$upscope $end

$scope module busRoad $end
$var wire 1 ?! in0 [7] $end
$var wire 1 @! in0 [6] $end
$var wire 1 A! in0 [5] $end
$var wire 1 B! in0 [4] $end
$var wire 1 C! in0 [3] $end
$var wire 1 D! in0 [2] $end
$var wire 1 E! in0 [1] $end
$var wire 1 F! in0 [0] $end
$var wire 1 G! in1 [7] $end
$var wire 1 H! in1 [6] $end
$var wire 1 I! in1 [5] $end
$var wire 1 J! in1 [4] $end
$var wire 1 [ in1 [3] $end
$var wire 1 \ in1 [2] $end
$var wire 1 ] in1 [1] $end
$var wire 1 ^ in1 [0] $end
$var wire 1 K! in2 [7] $end
$var wire 1 L! in2 [6] $end
$var wire 1 M! in2 [5] $end
$var wire 1 N! in2 [4] $end
$var wire 1 _ in2 [3] $end
$var wire 1 ` in2 [2] $end
$var wire 1 a in2 [1] $end
$var wire 1 b in2 [0] $end
$var wire 1 C in3 [7] $end
$var wire 1 D in3 [6] $end
$var wire 1 E in3 [5] $end
$var wire 1 F in3 [4] $end
$var wire 1 G in3 [3] $end
$var wire 1 H in3 [2] $end
$var wire 1 I in3 [1] $end
$var wire 1 J in3 [0] $end
$var wire 1 K in4 [7] $end
$var wire 1 L in4 [6] $end
$var wire 1 M in4 [5] $end
$var wire 1 N in4 [4] $end
$var wire 1 O in4 [3] $end
$var wire 1 P in4 [2] $end
$var wire 1 Q in4 [1] $end
$var wire 1 R in4 [0] $end
$var wire 1 S in5 [7] $end
$var wire 1 T in5 [6] $end
$var wire 1 U in5 [5] $end
$var wire 1 V in5 [4] $end
$var wire 1 W in5 [3] $end
$var wire 1 X in5 [2] $end
$var wire 1 Y in5 [1] $end
$var wire 1 Z in5 [0] $end
$var wire 1 O! in6 [7] $end
$var wire 1 P! in6 [6] $end
$var wire 1 Q! in6 [5] $end
$var wire 1 R! in6 [4] $end
$var wire 1 S! in6 [3] $end
$var wire 1 T! in6 [2] $end
$var wire 1 U! in6 [1] $end
$var wire 1 V! in6 [0] $end
$var wire 1 - in7 [7] $end
$var wire 1 . in7 [6] $end
$var wire 1 / in7 [5] $end
$var wire 1 0 in7 [4] $end
$var wire 1 1 in7 [3] $end
$var wire 1 2 in7 [2] $end
$var wire 1 3 in7 [1] $end
$var wire 1 4 in7 [0] $end
$var wire 1 %! sel [2] $end
$var wire 1 &! sel [1] $end
$var wire 1 '! sel [0] $end
$var reg 8 W! out [7:0] $end
$upscope $end

$scope module aluUnit $end
$var wire 1 9 clk $end
$var wire 1 K op1 [7] $end
$var wire 1 L op1 [6] $end
$var wire 1 M op1 [5] $end
$var wire 1 N op1 [4] $end
$var wire 1 O op1 [3] $end
$var wire 1 P op1 [2] $end
$var wire 1 Q op1 [1] $end
$var wire 1 R op1 [0] $end
$var wire 1 C op2 [7] $end
$var wire 1 D op2 [6] $end
$var wire 1 E op2 [5] $end
$var wire 1 F op2 [4] $end
$var wire 1 G op2 [3] $end
$var wire 1 H op2 [2] $end
$var wire 1 I op2 [1] $end
$var wire 1 J op2 [0] $end
$var wire 1 (! sel [2] $end
$var wire 1 )! sel [1] $end
$var wire 1 *! sel [0] $end
$var wire 1 K out [7] $end
$var wire 1 L out [6] $end
$var wire 1 M out [5] $end
$var wire 1 N out [4] $end
$var wire 1 O out [3] $end
$var wire 1 P out [2] $end
$var wire 1 Q out [1] $end
$var wire 1 R out [0] $end
$var wire 1 c co $end
$var wire 1 X! add [7] $end
$var wire 1 Y! add [6] $end
$var wire 1 Z! add [5] $end
$var wire 1 [! add [4] $end
$var wire 1 \! add [3] $end
$var wire 1 ]! add [2] $end
$var wire 1 ^! add [1] $end
$var wire 1 _! add [0] $end
$var wire 1 `! addo $end
$var wire 1 a! ashl [7] $end
$var wire 1 b! ashl [6] $end
$var wire 1 c! ashl [5] $end
$var wire 1 d! ashl [4] $end
$var wire 1 e! ashl [3] $end
$var wire 1 f! ashl [2] $end
$var wire 1 g! ashl [1] $end
$var wire 1 h! ashl [0] $end
$var wire 1 i! ashlo $end
$var wire 1 j! xnr [7] $end
$var wire 1 k! xnr [6] $end
$var wire 1 l! xnr [5] $end
$var wire 1 m! xnr [4] $end
$var wire 1 n! xnr [3] $end
$var wire 1 o! xnr [2] $end
$var wire 1 p! xnr [1] $end
$var wire 1 q! xnr [0] $end
$var wire 1 r! div [7] $end
$var wire 1 s! div [6] $end
$var wire 1 t! div [5] $end
$var wire 1 u! div [4] $end
$var wire 1 v! div [3] $end
$var wire 1 w! div [2] $end
$var wire 1 x! div [1] $end
$var wire 1 y! div [0] $end
$var wire 1 z! divo $end
$var wire 1 {! comp2s [7] $end
$var wire 1 |! comp2s [6] $end
$var wire 1 }! comp2s [5] $end
$var wire 1 ~! comp2s [4] $end
$var wire 1 !" comp2s [3] $end
$var wire 1 "" comp2s [2] $end
$var wire 1 #" comp2s [1] $end
$var wire 1 $" comp2s [0] $end

$scope module add_Module $end
$var wire 1 K op1 [7] $end
$var wire 1 L op1 [6] $end
$var wire 1 M op1 [5] $end
$var wire 1 N op1 [4] $end
$var wire 1 O op1 [3] $end
$var wire 1 P op1 [2] $end
$var wire 1 Q op1 [1] $end
$var wire 1 R op1 [0] $end
$var wire 1 C op2 [7] $end
$var wire 1 D op2 [6] $end
$var wire 1 E op2 [5] $end
$var wire 1 F op2 [4] $end
$var wire 1 G op2 [3] $end
$var wire 1 H op2 [2] $end
$var wire 1 I op2 [1] $end
$var wire 1 J op2 [0] $end
$var wire 1 X! out [7] $end
$var wire 1 Y! out [6] $end
$var wire 1 Z! out [5] $end
$var wire 1 [! out [4] $end
$var wire 1 \! out [3] $end
$var wire 1 ]! out [2] $end
$var wire 1 ^! out [1] $end
$var wire 1 _! out [0] $end
$var wire 1 `! cout $end
$upscope $end

$scope module ashl_Module $end
$var wire 1 K op1 [7] $end
$var wire 1 L op1 [6] $end
$var wire 1 M op1 [5] $end
$var wire 1 N op1 [4] $end
$var wire 1 O op1 [3] $end
$var wire 1 P op1 [2] $end
$var wire 1 Q op1 [1] $end
$var wire 1 R op1 [0] $end
$var wire 1 a! out [7] $end
$var wire 1 b! out [6] $end
$var wire 1 c! out [5] $end
$var wire 1 d! out [4] $end
$var wire 1 e! out [3] $end
$var wire 1 f! out [2] $end
$var wire 1 g! out [1] $end
$var wire 1 h! out [0] $end
$var wire 1 i! cout $end
$upscope $end

$scope module xnor_Module $end
$var wire 1 K op1 [7] $end
$var wire 1 L op1 [6] $end
$var wire 1 M op1 [5] $end
$var wire 1 N op1 [4] $end
$var wire 1 O op1 [3] $end
$var wire 1 P op1 [2] $end
$var wire 1 Q op1 [1] $end
$var wire 1 R op1 [0] $end
$var wire 1 C op2 [7] $end
$var wire 1 D op2 [6] $end
$var wire 1 E op2 [5] $end
$var wire 1 F op2 [4] $end
$var wire 1 G op2 [3] $end
$var wire 1 H op2 [2] $end
$var wire 1 I op2 [1] $end
$var wire 1 J op2 [0] $end
$var wire 1 j! out [7] $end
$var wire 1 k! out [6] $end
$var wire 1 l! out [5] $end
$var wire 1 m! out [4] $end
$var wire 1 n! out [3] $end
$var wire 1 o! out [2] $end
$var wire 1 p! out [1] $end
$var wire 1 q! out [0] $end
$upscope $end

$scope module div2_Moudle $end
$var wire 1 K op1 [7] $end
$var wire 1 L op1 [6] $end
$var wire 1 M op1 [5] $end
$var wire 1 N op1 [4] $end
$var wire 1 O op1 [3] $end
$var wire 1 P op1 [2] $end
$var wire 1 Q op1 [1] $end
$var wire 1 R op1 [0] $end
$var wire 1 r! out [7] $end
$var wire 1 s! out [6] $end
$var wire 1 t! out [5] $end
$var wire 1 u! out [4] $end
$var wire 1 v! out [3] $end
$var wire 1 w! out [2] $end
$var wire 1 x! out [1] $end
$var wire 1 y! out [0] $end
$var wire 1 z! cout $end
$upscope $end

$scope module comp2s_Module $end
$var wire 1 K op1 [7] $end
$var wire 1 L op1 [6] $end
$var wire 1 M op1 [5] $end
$var wire 1 N op1 [4] $end
$var wire 1 O op1 [3] $end
$var wire 1 P op1 [2] $end
$var wire 1 Q op1 [1] $end
$var wire 1 R op1 [0] $end
$var wire 1 {! out [7] $end
$var wire 1 |! out [6] $end
$var wire 1 }! out [5] $end
$var wire 1 ~! out [4] $end
$var wire 1 !" out [3] $end
$var wire 1 "" out [2] $end
$var wire 1 #" out [1] $end
$var wire 1 $" out [0] $end
$upscope $end
$upscope $end

$scope module decoder_instruction $end
$var wire 1 T in [2] $end
$var wire 1 U in [1] $end
$var wire 1 V in [0] $end
$var reg 8 %" out [7:0] $end
$upscope $end

$scope module decoder_sc $end
$var wire 1 +! in [2] $end
$var wire 1 ,! in [1] $end
$var wire 1 -! in [0] $end
$var reg 8 &" out [7:0] $end
$upscope $end

$scope module PC $end
$var wire 1 9 clk $end
$var wire 1 k inc $end
$var wire 1 j load $end
$var wire 1 l clr $end
$var wire 1 ? in [3] $end
$var wire 1 @ in [2] $end
$var wire 1 A in [1] $end
$var wire 1 B in [0] $end
$var reg 4 '" out [3:0] $end
$upscope $end

$scope module AR $end
$var wire 1 9 clk $end
$var wire 1 n inc $end
$var wire 1 m load $end
$var wire 1 o clr $end
$var wire 1 ? in [3] $end
$var wire 1 @ in [2] $end
$var wire 1 A in [1] $end
$var wire 1 B in [0] $end
$var reg 4 (" out [3:0] $end
$upscope $end

$scope module DR $end
$var wire 1 9 clk $end
$var wire 1 h inc $end
$var wire 1 g load $end
$var wire 1 i clr $end
$var wire 1 ; in [7] $end
$var wire 1 < in [6] $end
$var wire 1 = in [5] $end
$var wire 1 > in [4] $end
$var wire 1 ? in [3] $end
$var wire 1 @ in [2] $end
$var wire 1 A in [1] $end
$var wire 1 B in [0] $end
$var reg 8 )" out [7:0] $end
$upscope $end

$scope module AC $end
$var wire 1 9 clk $end
$var wire 1 q inc $end
$var wire 1 p load $end
$var wire 1 r clr $end
$var wire 1 ; in [7] $end
$var wire 1 < in [6] $end
$var wire 1 = in [5] $end
$var wire 1 > in [4] $end
$var wire 1 ? in [3] $end
$var wire 1 @ in [2] $end
$var wire 1 A in [1] $end
$var wire 1 B in [0] $end
$var reg 8 *" out [7:0] $end
$upscope $end

$scope module IR $end
$var wire 1 9 clk $end
$var wire 1 e inc $end
$var wire 1 d load $end
$var wire 1 f clr $end
$var wire 1 ; in [7] $end
$var wire 1 < in [6] $end
$var wire 1 = in [5] $end
$var wire 1 > in [4] $end
$var wire 1 ? in [3] $end
$var wire 1 @ in [2] $end
$var wire 1 A in [1] $end
$var wire 1 B in [0] $end
$var reg 8 +" out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
bx W!
bx %"
bx &"
bx '"
bx ("
bx )"
bx *"
bx +"
x#
x$
x,
x+
x*
x)
x(
x'
x&
x%
x4
x3
x2
x1
x0
x/
x.
x-
x8
x7
x6
x5
xB
xA
x@
x?
x>
x=
x<
x;
xJ
xI
xH
xG
xF
xE
xD
xC
xR
xQ
xP
xO
xN
xM
xL
xK
xZ
xY
xX
xW
xV
xU
xT
xS
x^
x]
x\
x[
xb
xa
x`
x_
xc
xd
0e
0f
xg
0h
0i
0j
xk
1l
xm
0n
0o
xp
0q
0r
xz
xy
xx
xw
xv
xu
xt
xs
x$!
x#!
x"!
x!!
x~
x}
x|
x{
x'!
x&!
x%!
x*!
x)!
x(!
z-!
z,!
z+!
1.!
x/!
00!
x1!
02!
x3!
x4!
x5!
x6!
x7!
x8!
x9!
x:!
z;!
x<!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
x`!
0h!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
xi!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
0r!
xz!
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
1:
09
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0=!
0>!
$end
#5
1!
19
b0 '"
0b
0a
0`
0_
#10
0"
0!
0:
0l
x.!
09
#15
1!
19
#20
0!
09
#25
1!
19
#30
0!
09
#35
1!
19
#40
0!
09
#45
1!
19
#50
0!
09
#55
1!
19
#60
0!
09
#65
1!
19
#70
0!
09
#75
1!
19
#80
0!
09
#85
1!
19
#90
0!
09
#95
1!
19
#100
0!
09
#105
1!
19
#110
0!
09
#115
1!
19
#120
0!
09
#125
1!
19
#130
0!
09
#135
1!
19
#140
0!
09
#145
1!
19
#150
0!
09
#155
1!
19
#160
0!
09
#165
1!
19
#170
0!
09
#175
1!
19
#180
0!
09
#185
1!
19
#190
0!
09
#195
1!
19
#200
0!
09
#205
1!
19
#210
0!
09
#215
1!
19
#220
0!
09
#225
1!
19
#230
0!
09
#235
1!
19
#240
0!
09
#245
1!
19
#250
0!
09
#255
1!
19
#260
0!
09
#265
1!
19
#270
0!
09
#275
1!
19
#280
0!
09
#285
1!
19
#290
0!
09
#295
1!
19
#300
0!
09
